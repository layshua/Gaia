#version 400

     layout(vertices = 4) out;

    uniform vec2 screen_size = vec2(1280,720);
    uniform mat4 u_pvm;
    uniform float lod_factor=20.0;
    
	uniform sampler2D u_heightMap;
	uniform float u_gridSpacing;

    bool offscreen(vec4 vertex){
        if(vertex.z < -0.5){
            return true;
        }
        return any(
            lessThan(vertex.xy, vec2(-1.7)) ||
            greaterThan(vertex.xy, vec2(1.7))
        );
    }
    
    vec4 project(vec4 vertex){
        vec4 result = u_pvm * vertex;
        result /= result.w;
        return result;
    }



    vec2 screen_space(vec4 vertex){
        return (clamp(vertex.xy, -1.3, 1.3)+1) * (screen_size*0.5);
    }

	float sphericalLevel(vec4 v0World, vec4 v1World)
	{
		vec4 midPoint = (v0World + v1World)*0.5;

		float lengthWorld = distance(v0World, v1World);

		vec4 highPoint = midPoint;
		highPoint.y+= lengthWorld;

		vec4 projected = project(highPoint-midPoint);
		vec2 projectedSS = screen_space(projected);
		return clamp(length(projectedSS)/lod_factor,1,64);
	}

    float level(vec2 v0, vec2 v1){
        return clamp(distance(v0, v1)/lod_factor, 1, 64);
    }

    void main(){
        if(gl_InvocationID == 0){

			vec4 tSize = vec4(textureSize(u_heightMap,0).xy,1,1);
			vec4 p0WS = gl_in[0].gl_Position*tSize*u_gridSpacing;
			vec4 p1WS = gl_in[1].gl_Position*tSize*u_gridSpacing;
			vec4 p2WS = gl_in[2].gl_Position*tSize*u_gridSpacing;
			vec4 p3WS = gl_in[3].gl_Position*tSize*u_gridSpacing;
            vec4 v0 = project(p0WS);
            vec4 v1 = project(p1WS);
            vec4 v2 = project(p2WS);
            vec4 v3 = project(p3WS);

            //if(all(bvec4(offscreen(v0), offscreen(v1), offscreen(v2), offscreen(v3)))){
            //    gl_TessLevelInner[0] = 0;
            //    gl_TessLevelInner[1] = 0;
            //    gl_TessLevelOuter[0] = 0;
            //    gl_TessLevelOuter[1] = 0;
            //    gl_TessLevelOuter[2] = 0;
            //    gl_TessLevelOuter[3] = 0;
            //}
            //else{
                vec2 ss0 = screen_space(v0);
                vec2 ss1 = screen_space(v1);
                vec2 ss2 = screen_space(v2);
                vec2 ss3 = screen_space(v3);

                float e0 = level(ss1, ss2);
                float e1 = level(ss0, ss1);
                float e2 = level(ss3, ss0);
                float e3 = level(ss2, ss3);

				//float e0 = sphericalLevel(p1WS,p2WS);
				//float e1 = sphericalLevel(p0WS,p1WS);
				//float e2 = sphericalLevel(p3WS,p0WS);
				//float e3 = sphericalLevel(p2WS,p3WS);

                gl_TessLevelInner[0] = mix(e1, e2, 0.5);
                gl_TessLevelInner[1] = mix(e0, e3, 0.5);
                gl_TessLevelOuter[0] = e0;
                gl_TessLevelOuter[1] = e1;
                gl_TessLevelOuter[2] = e2;
                gl_TessLevelOuter[3] = e3;
            //}
        }

		//gl_TessLevelInner[0] = 1;
  //      gl_TessLevelInner[1] = 1;
  //      gl_TessLevelOuter[0] = 1;
  //      gl_TessLevelOuter[1] = 1;
  //      gl_TessLevelOuter[2] = 1;
  //      gl_TessLevelOuter[3] = 1;

        gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    }
